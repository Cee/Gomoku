package gomoku.netgame;
import gomoku.constants.Constants;
import gomoku.language.Language;
import gomoku.netgame.NetGamePanel.AnimationListener;
import gomoku.netgame.NetGamePanel.LastListener;
import gomoku.netgame.NetGamePanel.NextListener;
import gomoku.netgame.NetGamePanel.ReviewListener;
import gomoku.theme.Theme;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.Date;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
/**
 * 
 * @author luck
 *@version 2013.4.3
 * 服务器建立
 */
public class GomokuServer extends NetGamePanel {
	private static final long serialVersionUID = 1L;
	boolean isLinked = false;
	JLabel jlbloading;
	ServerSocket serverSocket;
	ServerSocket retractServerSocket;
	ServerSocket giveupServerSocket;
	public GomokuServer() {
			myplayer=1;
			otherplayer=2;
			jbtStart.addActionListener(new StartListener());
			jbtReturn.addActionListener(new ReturnListener());
			jbtRetract.addActionListener(new RetractListener());
			jbtGiveup.addActionListener(new GiveupListener());
			jbtReview.addActionListener(new ReviewListener());
			jbtNext.addActionListener(new NextListener());
			jbtLast.addActionListener(new LastListener());
			jbtAnimation.addActionListener(new AnimationListener());
			guiboard.renew();
			firstplayer=1;
			jbtGiveup.setEnabled(false);
			jbtReview.setEnabled(false);
			chessBoard.initial();
	

	}
	public void link(){
		new LinkThread().start();			
	}
	class LinkThread extends Thread{
		public void run(){
			try {
				serverSocket = new ServerSocket(7676);
				retractServerSocket = new ServerSocket(7677);
				giveupServerSocket = new ServerSocket(7678);
				System.out.println(serverSocket.getLocalSocketAddress());
				socket = serverSocket.accept();
				retractSocket = retractServerSocket.accept();
				giveupSocket=giveupServerSocket.accept();
				
			} catch (IOException e1) {
				System.out.println("连接失败");		
				e1.printStackTrace();
			}
			isLinked=true;
		}
	}
	class StartListener implements ActionListener {
		public void  actionPerformed (ActionEvent e) {
			jbtStart.setEnabled(false);
			jbtGiveup.setEnabled(true);
			new CheckThread().start();
			new RuleThread().start();
			new RetractThread().start();
			new GiveupThread().start();
		}

	}
	
	
	class RuleThread extends Thread {
		int Model;
		public void run() {

			String[] Players = {player1.getName(),player2.getName()}; 	
			String select = player1.choosefirst(Players);
			if (select.equals(player2.getName())){
				firstplayer = 2;
			}
			try {
				socket.getOutputStream().write(firstplayer);
			} catch (IOException e) {
				e.printStackTrace();
			}
			if (firstplayer==1) {
				guiboard.AddListener();
				while (guiboard.step<=3) {
					try {
						sleep(100);
						if (guiboard.isClicked) {
							socket.getOutputStream().write(guiboard.SendRow);
							socket.getOutputStream().write(guiboard.SendColumn);
							guiboard.isClicked=false;
							System.out.println(guiboard.step);
						}
					} catch (InterruptedException | IOException e) {
						e.printStackTrace();
					}
				}
				guiboard.removeListener();
				try {
					Model = socket.getInputStream().read();
				} catch (IOException e) {
					e.printStackTrace();
				}
				if (Model==0) {
					while (guiboard.step<=5) {
						try {
							System.out.println("check");
							sleep(100);
							int row, column;
						    row = socket.getInputStream().read();
						    column = socket.getInputStream().read();
							guiboard.SetIcon(new Integer[]{row,column,guiboard.color});
						    guiboard.check(row, column);
							guiboard.step++;			
							System.out.println(row + " " + column);

						} catch (InterruptedException | IOException e) {
							e.printStackTrace();
						}
					}
					String Select = player1.chooseagain();
					if (Select.equals(Language.CHOOSEBLACK)) {
						myColor=Constants.BLACK;
						otherColor=Constants.WHITE;
						try {
							socket.getOutputStream().write(myColor);
							socket.getOutputStream().write(otherColor);
							guiboard.activeplayer=2;
							socket.getOutputStream().write(guiboard.activeplayer);
						} catch (IOException e) {
							e.printStackTrace();
						}

						startThread();
					} else if (Select.equals(Language.CHOOSEWHITE)) {
						myColor=Constants.WHITE;
						otherColor=Constants.BLACK;
						try {
							socket.getOutputStream().write(myColor);
							socket.getOutputStream().write(otherColor);
							guiboard.activeplayer=1;
							socket.getOutputStream().write(guiboard.activeplayer);
						} catch (IOException e) {
							e.printStackTrace();
						}
						
						startThread();
					}
				} else if(Model==1) {
					try {
						otherColor=socket.getInputStream().read();
						myColor=socket.getInputStream().read();
						guiboard.activeplayer=socket.getInputStream().read();
					} catch (IOException e) {
						e.printStackTrace();
					}
					startThread();
				}
				
			} else if (firstplayer==2) {
				while (guiboard.step<=3) {
					try {
						sleep(100);
						int row, column;
					    row = socket.getInputStream().read();
					    column = socket.getInputStream().read();
						
					    guiboard.SetIcon(new Integer[]{row,column,guiboard.color});
						guiboard.check(row, column);
					    guiboard.step++;				
					} catch (InterruptedException | IOException e) {
						e.printStackTrace();
					}
				}
				String Select = player1.choose();
				if (Select.equals(Language.DOMORE)) {
					guiboard.isClicked=false;
					try {
						socket.getOutputStream().write(0);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					guiboard.AddListener();
					while (guiboard.step<=5) {
						try {
							sleep(100);
							if (guiboard.isClicked){
								socket.getOutputStream().write(guiboard.SendRow);
								socket.getOutputStream().write(guiboard.SendColor);
								guiboard.isClicked=false;
							}
						   
						} catch (InterruptedException | IOException e) {
							e.printStackTrace();
						}
					}
					try {
						otherColor=socket.getInputStream().read();
						myColor=socket.getInputStream().read();
						guiboard.activeplayer=socket.getInputStream().read();
						startThread();
					} catch (IOException e) {
						e.printStackTrace();
					}
					
				} 			else if (Select.equals(Language.CHOOSEBLACK)){
					try {
						socket.getOutputStream().write(1);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					myColor=Constants.BLACK;
					otherColor=Constants.WHITE;
					try {
						socket.getOutputStream().write(myColor);
						socket.getOutputStream().write(otherColor);
						guiboard.activeplayer=2;
						socket.getOutputStream().write(guiboard.activeplayer);
					} catch (IOException e) {
						e.printStackTrace();
					}
					startThread();
				}
				else if (Select.equals(Language.CHOOSEWHITE)){
					try {
						socket.getOutputStream().write(1);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					myColor=Constants.WHITE;
					otherColor=Constants.BLACK;
					try {
						socket.getOutputStream().write(myColor);
						socket.getOutputStream().write(otherColor);
						guiboard.activeplayer=1;
						socket.getOutputStream().write(guiboard.activeplayer);
					} catch (IOException e) {
						e.printStackTrace();
					}
					startThread();
				}
			}
			
		}
	}
	public void startThread() {
		new NetThread(this).start();
	}
	}
	
	




